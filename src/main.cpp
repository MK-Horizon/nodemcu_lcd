#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <string.h>

#include<SoftwareSerial.h> //Included SoftwareSerial Library
//Started SoftwareSerial at RX and TX pin of ESP8266/NodeMCU
SoftwareSerial s(3,1);



uint8_t dawin_check[]={0x80,0x03, 0x00, 0x07, 0x00, 0x01, 0x2B, 0xDA};

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 
#define TX_OUT 1
#define OLED_RESET     -1 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


 static const uint8_t PROGMEM image_data[1024] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x07, 0xff, 0xf8, 0x1f, 0xe0, 
0xff, 0x7f, 0xff, 0xff, 0xfd, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x03, 0xff, 0xf8, 0x1f, 0xe0, 
0xff, 0x7f, 0xff, 0xff, 0xfd, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x03, 0xff, 0xf0, 0x1f, 0xe0, 
0xff, 0x3f, 0xff, 0xff, 0xf9, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x01, 0xff, 0xf0, 0x1f, 0xe0, 
0xff, 0x3f, 0xff, 0xff, 0xf9, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x01, 0xff, 0xf0, 0x1f, 0xe0, 
0xff, 0x0f, 0xff, 0xff, 0xe1, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0xff, 0xe0, 0x1f, 0xe0, 
0xff, 0x07, 0xff, 0xff, 0xc1, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x7f, 0xe0, 0x1f, 0xe0, 
0xff, 0x07, 0xff, 0xff, 0x81, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x7f, 0xc0, 0x1f, 0xe0, 
0xff, 0x07, 0xff, 0xff, 0x81, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x7f, 0xc0, 0x1f, 0xe0, 
0xff, 0x03, 0xff, 0xff, 0x01, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x3f, 0x80, 0x1f, 0xe0, 
0xff, 0x01, 0xff, 0xff, 0x01, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0x00, 0x1f, 0xe0, 
0xff, 0x01, 0xff, 0xfc, 0x01, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x0f, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x7f, 0xfc, 0x01, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x0e, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x7f, 0xf0, 0x01, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x04, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x3f, 0xf0, 0x01, 0xf0, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x04, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x1f, 0xe0, 0x01, 0xf0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x0f, 0xc0, 0x01, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x07, 0x80, 0x01, 0xf0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x07, 0x00, 0x01, 0xf0, 0x00, 0x7f, 0xfc, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0xff, 0xfc, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x7f, 0xfc, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x7f, 0xf8, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x3f, 0xfc, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x1f, 0xfc, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x0f, 0xfc, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x0f, 0xfc, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x07, 0xfd, 0x55, 0x5f, 0x00, 0x0e, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x1f, 0x00, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0x80, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xc0, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x7f, 0xc0, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x7f, 0xc0, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0xff, 0xe0, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x01, 0xff, 0xf0, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x01, 0xff, 0xf0, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x01, 0xff, 0xf0, 0x1f, 0xe0, 
0xff, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xff, 0x03, 0xff, 0xf8, 0x1f, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
};


void printHexValue(uint8_t toBeDisplayed){
  char hexChar[2];
  delay(500);
  sprintf(hexChar, "%u", toBeDisplayed);
  display.println(hexChar);
  display.display();
  Serial.print(hexChar);
}


void setup() {
  s.begin(9600);
  pinMode(TX_OUT, OUTPUT);
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial1.println(F("SSD1306 allocation failed"));
    for(;;); 
  }
  delay(2000);
  display.drawBitmap(0,0, image_data, 123, 54, 1);
  display.display();
  display.clearDisplay();
}

int i;
int data;

void loop() {
  data = s.read();
  delay(2500);
  display.setTextSize(1);
  display.setTextColor(WHITE); // 'inverted' text
  display.setCursor(0, 10);
  display.println(data);
  display.display();
  s.print(data);
  display.clearDisplay();
  delay(1000);
}